server:
  port: 8009 # zuul服务端口为8009，在做路由转发时，将会转到8008上的服务上去消费

logging: 
    config: classpath:logback-spring.xml

spring: 
    application:
        name: zuul-server

eureka: 
   client:
      serviceUrl:
         defaultZone: http://192.168.101.15:8000/eureka
   instance:
      prefer-ip-address: true

zuul:
   servlet-path: /
   prefix: /data # 添加前缀，真实访问时将会去除这个前缀进行访问：加上：http://192.168.101.15:8009/data/service/zuul/v1，去除：http://192.168.101.15:8009/service/zuul/v1
   routes:
      zuul-simple:
         path: /service/** # 匹配/service/后面的多级uri，表达式有(1):/service/** 多级/A/B/CC/CCC,(2):/service/* 单级/A /B /CC /CCC,(3):/service/? 单字符/A /B /C /D 注：/A 为zull-simple的服务uri
         serviceId: zuul-simple

# zuul 经典配置方式
# (1)单实例映射时，可以不指定serviceId,效果等同上面的配置
# zuul:
#   routes:
#      zuul-simple: /service/**

# (2)对上面单实例更简单的配置是:效果等同以上,在不指定path的实例时，将会默认加上：zuul-simple: /service/**
# zuul:
#   routes:
#      zuul-simple: 

# (3)对上面采取路由到ServiceId之外，还能指定服务的物理地址,将serviceId改为物理地址url即可
# zuul:
#   routes:
#      zuul-simple: 
#         path: /service/**
#         url: http://192.168.101.15:8008

# (4)多实例路由时,和上面配置相差无几,但是可能需要禁止Ribbon使用eureka功能
# zuul:
#   routes:
#      zuul-simple: 
#         path: /service/**
#         serviceId: zuul-simple
#      zuul-comple: 
#         path: /conpont/**
#         serviceId: zuul-comple
# ribbon:
#    eureka:
#       enable: false # ribbon禁用eureka

# (5)当多个映射路径执行同一个实例时,将以最后一个为准，就是后面的会覆盖前面的
# zuul:
#   routes:
#      zuul-simple: 
#         path: /service/**
#         serviceId: zuul-simple
#      zuul-comple: 
#         path: /service/**
#         serviceId: zuul-comple

# (6)可以为映射值设置前缀,使用标识 /prefix,最初的示例已经有所体现。此功能可以使用stripPrefix禁止掉
# zuul: 
#    prefix: /data
#    routes: 
#       zuul-simple: 
#          path: /service/**
#          serviceId: zuul-simple
#          stripPrefix: false

# (7)服务屏蔽和接口屏蔽,使用ignored-services、ignored-patterns屏蔽服务和接口
# zuul:
#    prefix: /data
#    ignored-services: zuul-complex
#    ignored-patterns: /**/div/**
#    routes: 
#       zuul-simple: /service/**

# (8)除了上面屏蔽服务之外,还能切断与下层应用交互的字段传输,起到安全的作用
# zuul: 
#    routes: 
#       zuul-simple: 
#          path: /service/**
#          serviceId: zuul-simple
#          sensitiveHeaders: Cookie,Set-Cookie,Authorization